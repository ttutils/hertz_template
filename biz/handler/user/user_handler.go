// Code generated by hertz generator.

package user

import (
	"context"
	"hertz_template/biz/dal"
	"hertz_template/biz/dbmodel"
	user "hertz_template/biz/model/basic/user"
	"hertz_template/biz/model/common"
	"hertz_template/utils"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateUser 创建用户
// @Tags 用户
// @Summary 创建用户
// @Description 创建用户
// @Accept application/json
// @Produce application/json
// @Param req body user.CreateUserReq true "用户信息"
// @Success 200 {object} user.CommonUserResp
// @Security ApiKeyAuth
// @router /api/user/add [PUT]
func CreateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.CreateUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.CommonUserResp)

	// 先检查用户名是否已存在
	exist, err := dal.IsUsernameExists(req.Username)
	if err != nil {
		c.JSON(consts.StatusOK, &user.CommonUserResp{
			Code: common.Code_DBErr,
			Msg:  "检查用户名失败: " + err.Error(),
		})
		return
	}
	if exist {
		c.JSON(consts.StatusOK, &user.CommonUserResp{
			Code: common.Code_AlreadyExists,
			Msg:  "该用户已存在",
		})
		return
	}

	err = utils.IsAdmin(c)
	if err != nil {
		c.JSON(consts.StatusOK, &user.CommonUserResp{
			Code: common.Code_Unauthorized,
			Msg:  err.Error(),
		})
		return
	}

	u := &dbmodel.User{
		Username: req.Username,
		Password: "",
		Email:    req.Email,
	}

	if err = dal.CreateUser([]*dbmodel.User{u}); err != nil {
		c.JSON(consts.StatusOK, &user.CommonUserResp{Code: common.Code_DBErr, Msg: "用户新建失败: " + err.Error()})
		return
	}

	resp.Code = common.Code_Success
	resp.Msg = "新建用户成功"

	c.JSON(consts.StatusOK, resp)
}

// DeleteUser 删除用户
// @Tags 用户
// @Summary 删除用户
// @Description 删除用户
// @Accept application/json
// @Produce application/json
// @Param user_id path string true "用户ID"
// @Success 200 {object} user.CommonUserResp
// @Security ApiKeyAuth
// @router /api/user/delete/{user_id} [DELETE]
func DeleteUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.DeleteUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.CommonUserResp)

	err = utils.IsAdmin(c)
	if err != nil {
		c.JSON(consts.StatusOK, &user.CommonUserResp{
			Code: common.Code_Unauthorized,
			Msg:  err.Error(),
		})
		return
	}

	reqUserId, _ := strconv.Atoi(req.UserId)

	if reqUserId == 1 {
		c.JSON(consts.StatusOK, &user.CommonUserResp{Code: common.Code_Err, Msg: "不能删除管理员"})
		return
	}

	userId, _ := utils.GetUseridFromContext(c)
	if userId != 1 {
		c.JSON(consts.StatusOK, &user.CommonUserResp{Code: common.Code_Err, Msg: "非管理员账号没有权限"})
		return
	}

	if err = dal.DeleteUser(reqUserId); err != nil {
		c.JSON(consts.StatusOK, &user.CommonUserResp{Code: common.Code_DBErr, Msg: "删除用户失败: " + err.Error()})
		return
	}
	resp.Code = common.Code_Success
	resp.Msg = "用户" + req.UserId + "删除成功"

	c.JSON(consts.StatusOK, resp)
}

// UpdateUser 更新用户
// @Tags 用户
// @Summary 更新用户
// @Description 更新用户
// @Accept application/json
// @Produce application/json
// @Param user_id path string true "用户ID"
// @Param req body user.UpdateUserReq true "更新信息"
// @Success 200 {object} user.CommonUserResp
// @Security ApiKeyAuth
// @router /api/user/update/{user_id} [POST]
func UpdateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.CommonUserResp)

	userId, _ := strconv.Atoi(req.UserId)
	tokenUserId, _ := utils.GetUseridFromContext(c)

	if userId != tokenUserId {
		if tokenUserId != 1 {
			c.JSON(consts.StatusOK, &user.CommonUserResp{Code: common.Code_Unauthorized, Msg: "不能修改别人的密码"})
			return
		}
	}

	// 获取用户信息
	userData, err := dal.GetUserByID(userId)
	if err != nil {
		c.JSON(consts.StatusOK, &user.CommonUserResp{
			Code: common.Code_DBErr,
			Msg:  "数据库查询错误: " + err.Error(),
		})
		return
	}
	if userData == nil {
		c.JSON(consts.StatusOK, &user.CommonUserResp{
			Code: common.Code_DBErr,
			Msg:  "用户未找到",
		})
		return
	}

	// 更新用户名等其他字段
	if req.Username != nil {
		userData.Username = *req.Username
		// 先检查用户名是否已存在
		exist, err := dal.IsUsernameExists(*req.Username)
		if err != nil {
			c.JSON(consts.StatusOK, &user.CommonUserResp{
				Code: common.Code_DBErr,
				Msg:  "检查用户名失败: " + err.Error(),
			})
			return
		}
		if exist && userData.Username != *req.Username {
			c.JSON(consts.StatusOK, &user.CommonUserResp{
				Code: common.Code_AlreadyExists,
				Msg:  "该用户已存在",
			})
			return
		}
	}

	if req.Email != nil {
		userData.Email = req.Email
	}

	// 方法保存数据
	err = dal.UpdateUser(userData)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &user.CommonUserResp{
			Code: common.Code_DBErr,
			Msg:  "更新用户信息失败: " + err.Error(),
		})
		return
	}

	// 返回成功响应
	resp.Code = common.Code_Success
	resp.Msg = "用户信息更新成功"
	c.JSON(consts.StatusOK, resp)
}

// ChangePasswd 修改用户密码
// @Tags 用户
// @Summary 修改用户密码
// @Description 修改用户密码
// @Accept application/json
// @Produce application/json
// @Param user_id path string true "用户ID"
// @Param req body user.ChangePasswdReq true "密码信息"
// @Success 200 {object} user.CommonUserResp
// @Security ApiKeyAuth
// @router /api/user/change_passwd/{user_id} [POST]
func ChangePasswd(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.ChangePasswdReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.CommonUserResp)

	userId, _ := strconv.Atoi(req.UserId)
	tokenUserId, _ := utils.GetUseridFromContext(c)

	if userId != tokenUserId {
		if tokenUserId != 1 {
			c.JSON(consts.StatusOK, &user.CommonUserResp{Code: common.Code_Unauthorized, Msg: "不能修改别人的密码"})
			return
		}
	}

	// 获取用户信息
	userData, err := dal.GetUserByID(userId)
	if err != nil {
		c.JSON(consts.StatusOK, &user.CommonUserResp{
			Code: common.Code_DBErr,
			Msg:  "数据库查询错误: " + err.Error(),
		})
		return
	}
	if userData == nil {
		c.JSON(consts.StatusOK, &user.CommonUserResp{
			Code: common.Code_DBErr,
			Msg:  "用户未找到",
		})
		return
	}

	userData.Password = utils.MD5(req.Password)

	// 方法保存数据
	err = dal.UpdateUser(userData)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &user.CommonUserResp{
			Code: common.Code_DBErr,
			Msg:  "修改密码失败: " + err.Error(),
		})
		return
	}

	// 返回成功响应
	resp.Code = common.Code_Success
	resp.Msg = "密码更新成功"

	c.JSON(consts.StatusOK, resp)
}

// UserLogin 用户登录
// @Tags 用户
// @Summary 用户登录
// @Description 用户登录
// @Accept application/json
// @Produce application/json
// @Param req body user.LoginUserReq true "登录凭证"
// @Success 200 {object} user.UserLoginResp
// @router /api/user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserLoginResp)

	userData, err := dal.UserLogin(req.Username)
	if err != nil {
		c.JSON(consts.StatusOK, &user.UserLoginResp{Code: common.Code_DBErr, Msg: err.Error()})
		return
	}

	if userData.Password != utils.MD5(req.Password) {
		c.JSON(consts.StatusOK, &user.UserLoginResp{Code: common.Code_PasswordErr, Msg: "密码错误"})
		return
	}

	var token string
	if req.RememberMe {
		token, _ = utils.GenerateToken(userData.ID, req.Username)
	} else {
		//如果没有选记住我就1小时token
		token, _ = utils.GenerateToken(userData.ID, req.Username, 1)
	}

	resp.Code = common.Code_Success
	resp.Msg = "登录成功"
	resp.Data = &user.UserLoginData{
		Token: token,
	}

	c.JSON(consts.StatusOK, resp)
}

// UserList 用户列表
// @Tags 用户
// @Summary 用户列表
// @Description 用户列表
// @Accept application/json
// @Produce application/json
// @Param page query int false "页码" default(1)
// @Param page_size query int false "每页数量" default(10)
// @Param username query string false "用户名"
// @Param email query string false "邮箱"
// @Success 200 {object} user.UserListResp
// @Security ApiKeyAuth
// @router /api/user/list [GET]
func UserList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserListResp)

	// 检查管理员权限
	err = utils.IsAdmin(c)
	if err != nil {
		c.JSON(consts.StatusOK, &user.UserListResp{
			Code: common.Code_Unauthorized,
			Msg:  err.Error(),
		})
		return
	}

	// 设置分页默认值
	if req.Page == 0 {
		req.Page = 1
	}
	if req.PageSize == 0 {
		req.PageSize = 10
	}

	// 计算偏移量
	offset := (req.Page - 1) * req.PageSize

	if req.Username == nil {
		req.Username = new(string)
		*req.Username = ""
	}

	if req.Email == nil {
		req.Email = new(string)
		*req.Email = ""
	}

	// 获取用户列表和总数（转换分页参数类型）
	users, total, err := dal.GetUserList(int(req.PageSize), int(offset), *req.Username, *req.Email)
	if err != nil {
		c.JSON(consts.StatusOK, &user.UserListResp{
			Code: common.Code_DBErr,
			Msg:  "获取用户列表失败: " + err.Error(),
		})
		return
	}

	// 转换响应格式
	var userList []*user.UserData
	for _, u := range users {
		userList = append(userList, &user.UserData{
			UserId:   strconv.Itoa(int(u.ID)),
			Username: u.Username,
			Email: func() string {
				if u.Email != nil {
					return *u.Email
				}
				return ""
			}(),
		})
	}

	resp.Code = common.Code_Success
	resp.Msg = "获取成功"
	resp.Total = total
	resp.Data = userList

	c.JSON(consts.StatusOK, resp)
}

// UserInfo 用户信息
// @Tags 用户
// @Summary 用户信息
// @Description 用户信息
// @Accept application/json
// @Produce application/json
// @Param user_id path string true "用户ID"
// @Success 200 {object} user.UserInfoResp
// @Security ApiKeyAuth
// @router /api/user/info/{user_id} [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserInfoResp)

	userId, _ := strconv.Atoi(req.UserId)
	tokenUserId, _ := utils.GetUseridFromContext(c)

	if userId != tokenUserId {
		c.JSON(consts.StatusOK, &user.UserInfoResp{Code: common.Code_Unauthorized, Msg: "不能修改获取别人"})
		return
	}

	// 获取用户信息
	userData, err := dal.GetUserByID(userId)
	if err != nil {
		c.JSON(consts.StatusOK, &user.UserInfoResp{
			Code: common.Code_DBErr,
			Msg:  "数据库查询错误: " + err.Error(),
		})
		return
	}
	if userData == nil {
		c.JSON(consts.StatusOK, &user.UserInfoResp{
			Code: common.Code_DBErr,
			Msg:  "用户未找到",
		})
		return
	}

	resp.Code = common.Code_Success
	resp.Msg = "用户信息更新成功"
	resp.Data = &user.UserData{
		UserId:   strconv.Itoa(int(userData.ID)),
		Username: userData.Username,
		Email: func() string {
			if userData.Email != nil {
				return *userData.Email
			}
			return ""
		}(),
	}

	c.JSON(consts.StatusOK, resp)
}
