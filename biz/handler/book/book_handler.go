// Code generated by hertz generator.

package book

import (
	"context"
	"hertz_template/biz/dal"
	"hertz_template/biz/dbmodel"
	book "hertz_template/biz/model/basic/book"
	"hertz_template/biz/model/common"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateBook 创建书籍
// @Tags 书籍
// @Summary 创建书籍
// @Description 创建书籍
// @Accept application/json
// @Produce application/json
// @Param req body book.CreateBookReq true "书籍信息"
// @Success 200 {object} book.CommonBookResp
// @Security ApiKeyAuth
// @router /api/book/add [PUT]
func CreateBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req book.CreateBookReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(book.CommonBookResp)

	exist, err := dal.IsBookExists(req.Title)
	if err != nil {
		c.JSON(consts.StatusOK, &book.CommonBookResp{
			Code: common.Code_DBErr,
			Msg:  "检查图书失败: " + err.Error(),
		})
		return
	}
	if exist {
		c.JSON(consts.StatusOK, &book.CommonBookResp{
			Code: common.Code_AlreadyExists,
			Msg:  "该图书已存在",
		})
		return
	}

	b := &dbmodel.Book{
		Title:   req.Title,
		Author:  req.Author,
		Year:    req.Year,
		Summary: req.Summary,
	}

	if err = dal.CreateBook([]*dbmodel.Book{b}); err != nil {
		c.JSON(consts.StatusOK, &book.CommonBookResp{Code: common.Code_DBErr, Msg: "创建图书失败: " + err.Error()})
		return
	}

	resp.Code = common.Code_Success
	resp.Msg = "创建图书成功"
	c.JSON(consts.StatusOK, resp)
}

// DeleteBook 删除书籍
// @Tags 书籍
// @Summary 删除书籍
// @Description 删除书籍
// @Accept application/json
// @Produce application/json
// @Param book_id path string true "书籍ID"
// @Success 200 {object} book.CommonBookResp
// @Security ApiKeyAuth
// @router /api/book/delete/{book_id} [DELETE]
func DeleteBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req book.DeleteBookReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(book.CommonBookResp)

	bookID, _ := strconv.Atoi(req.BookId)
	if err = dal.DeleteBook(uint(bookID)); err != nil {
		c.JSON(consts.StatusOK, &book.CommonBookResp{Code: common.Code_DBErr, Msg: "删除图书失败: " + err.Error()})
		return
	}

	resp.Code = common.Code_Success
	resp.Msg = "图书删除成功"
	c.JSON(consts.StatusOK, resp)
}

// UpdateBook 更新书籍
// @Tags 书籍
// @Summary 更新书籍
// @Description 更新书籍
// @Accept application/json
// @Produce application/json
// @Param book_id path string true "书籍ID"
// @Param req body book.UpdateBookReq true "更新信息"
// @Success 200 {object} book.CommonBookResp
// @Security ApiKeyAuth
// @router /api/book/update/{book_id} [POST]
func UpdateBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req book.UpdateBookReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(book.CommonBookResp)

	bookID, _ := strconv.Atoi(req.BookId)
	bookData, err := dal.GetBookByID(uint(bookID))
	if err != nil {
		c.JSON(consts.StatusOK, &book.CommonBookResp{
			Code: common.Code_DBErr,
			Msg:  "数据库查询错误: " + err.Error(),
		})
		return
	}
	if bookData == nil {
		c.JSON(consts.StatusOK, &book.CommonBookResp{
			Code: common.Code_Err,
			Msg:  "图书未找到",
		})
		return
	}

	if req.Title != nil {
		bookData.Title = *req.Title
	}
	if req.Author != nil {
		bookData.Author = *req.Author
	}
	if req.Year != nil {
		bookData.Year = *req.Year
	}
	if req.Summary != nil {
		bookData.Summary = req.Summary
	}

	if err = dal.UpdateBook(bookData); err != nil {
		c.JSON(consts.StatusInternalServerError, &book.CommonBookResp{
			Code: common.Code_DBErr,
			Msg:  "更新图书失败: " + err.Error(),
		})
		return
	}

	resp.Code = common.Code_Success
	resp.Msg = "图书更新成功"
	c.JSON(consts.StatusOK, resp)
}

// BookList 书籍列表
// @Tags 书籍
// @Summary 书籍列表
// @Description 书籍列表
// @Accept application/json
// @Produce application/json
// @Param page query int false "页码" default(1)
// @Param page_size query int false "每页数量" default(10)
// @Param title query string false "书名"
// @Param author query string false "作者"
// @Success 200 {object} book.BookListResp
// @Security ApiKeyAuth
// @router /api/book/list [GET]
func BookList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req book.BookListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(book.BookListResp)

	if req.Page == 0 {
		req.Page = 1
	}
	if req.PageSize == 0 {
		req.PageSize = 10
	}
	offset := (req.Page - 1) * req.PageSize

	var title, author string
	if req.Title != nil {
		title = *req.Title
	}
	if req.Author != nil {
		author = *req.Author
	}

	books, total, err := dal.GetBookList(int(req.PageSize), int(offset), title, author)
	if err != nil {
		c.JSON(consts.StatusOK, &book.BookListResp{
			Code: common.Code_DBErr,
			Msg:  "获取图书列表失败: " + err.Error(),
		})
		return
	}

	var bookList []*book.BookListData
	for _, b := range books {
		bookList = append(bookList, &book.BookListData{
			BookId: strconv.Itoa(int(b.ID)),
			Title:  b.Title,
			Author: b.Author,
			Year:   b.Year,
			Summary: func() string {
				if b.Summary != nil {
					return *b.Summary
				}
				return ""
			}(),
		})
	}

	resp.Code = common.Code_Success
	resp.Msg = "获取成功"
	resp.Total = total
	resp.Data = bookList
	c.JSON(consts.StatusOK, resp)
}
