// Code generated by hertz generator.

package main

import (
	"context"
	"embed"
	"fmt"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/hertz-contrib/swagger"
	swaggerFiles "github.com/swaggo/files"
	"hertz_template/biz/dal"
	"hertz_template/biz/mw"
	"hertz_template/utils/config"
	"hertz_template/utils/logger"
	"log"
	"net"
	"os/signal"
	"syscall"
	"time"

	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/network/standard"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	_ "hertz_template/docs"
)

//go:embed config/default.yaml
var defaultConfigContent []byte

//go:embed static/*
var staticFS embed.FS

// @title hertz_template
// @version 0.1.1
// @description learn hertz by [buyfakett](https://github.com/buyfakett).

// @contact.name buyfakett
// @contact.url https://github.com/buyfakett

// @BasePath /
// @schemes http
//
//	@securityDefinitions.apikey	ApiKeyAuth
//	@in	header
//	@name authorization
func main() {
	config.InitConfig(defaultConfigContent)
	logger.InitLog(config.Cfg.Server.LogLevel)
	dal.Init()
	port := fmt.Sprintf(":%d", config.Cfg.Server.Port)
	h := server.Default(
		server.WithHostPorts(port),
		server.WithMaxRequestBodySize(20<<20),
		server.WithTransport(standard.NewTransporter),
	)
	h.Use(gzip.Gzip(gzip.DefaultCompression))
	h.Use(accesslog.New())

	if config.Cfg.Server.LogLevel == "debug" {
		h.Use(cors.New(cors.Config{
			AllowOrigins:     []string{"*"},
			AllowMethods:     []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
			AllowHeaders:     []string{"Origin", "Content-Type", "Accept", "Authorization"},
			ExposeHeaders:    []string{"Content-Length"},
			AllowCredentials: true,
			MaxAge:           12 * time.Hour,
		}))
	}

	// 启动时打印完整访问地址
	h.OnRun = append(h.OnRun, func(ctx context.Context) error {
		// 遍历所有接口地址，找到第一个非回环 IPv4
		addrs, _ := net.InterfaceAddrs() // :contentReference[oaicite:0]{index=0}
		hlog.Debugf("🚀 服务启动在 http://localhost:%d", config.Cfg.Server.Port)
		for _, addr := range addrs {
			if ipNet, ok := addr.(*net.IPNet); ok &&
				!ipNet.IP.IsLoopback() &&
				ipNet.IP.To4() != nil {
				ip := ipNet.IP.String()
				hlog.Infof("🚀 服务启动在 http://%s:%d", ip, config.Cfg.Server.Port)
				break
			}
		}
		return nil
	})

	// 注册swagger文档
	if config.Cfg.Server.EnableSwagger {
		hlog.Info("🚀 Swagger文档已启用")
		h.GET("/api/swagger/*any", swagger.WrapHandler(swaggerFiles.Handler))
	}

	// 注册鉴权中间件
	h.Use(mw.JWTAuthMiddleware(config.Cfg.Auth.ExcludedPaths))
	// 注册静态文件中间件
	h.Use(mw.StaticFileMiddleware(staticFS))

	register(h)

	// 捕获 Ctrl+C / kill 等退出信号
	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	go func() {
		if err := h.Run(); err != nil {
			log.Fatalf("服务已关闭: %v", err)
		}
	}()

	<-ctx.Done()

	// 控制优雅退出的超时时间，0.5秒就退出
	shutdownCtx, cancel := context.WithTimeout(context.Background(), 500*time.Millisecond)
	defer cancel()
	if err := h.Shutdown(shutdownCtx); err != nil {
		log.Printf("关闭报错: %v", err)
	}
}
